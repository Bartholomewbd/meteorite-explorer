{"version":3,"sources":["components/MeteorList.js","components/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["MeteorList","_ref","meteorites","react_default","a","createElement","className","map","meteor","i","year","classes","push","slice","key","id","name","mass","reclat","reclong","SearchBox","searchChange","style","textAlign","type","placeholder","onChange","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","e","setState","searchValue","target","value","console","log","state","data","_this2","fetch","then","response","json","wordToMatch","filteredMeteorites","filter","meteorite","regex","RegExp","match","components_SearchBox","components_MeteorList","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA6CeA,SA3CI,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,WACpB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBAGJF,EAAAC,EAAAC,cAAA,aACGH,EAAWK,IAAI,SAACC,EAAQC,GACvB,IAMIC,EANEC,EAAU,GAUhB,OATIF,EAAI,IAAM,EACZE,EAAQC,KAAK,iBAEbD,EAAQC,KAAK,mBAGXJ,EAAOE,OACTA,EAAOF,EAAOE,KAAKG,MAAM,EAAG,IAG5BV,EAAAC,EAAAC,cAAA,MAAIC,UAAWK,EAASG,IAAKN,EAAOO,IAClCZ,EAAAC,EAAAC,cAAA,UAAKG,EAAOQ,MACZb,EAAAC,EAAAC,cAAA,UAAKG,EAAOO,IACZZ,EAAAC,EAAAC,cAAA,UAAKG,EAAOS,MACZd,EAAAC,EAAAC,cAAA,UAAKK,GACLP,EAAAC,EAAAC,cAAA,UAAKG,EAAOU,QACZf,EAAAC,EAAAC,cAAA,UAAKG,EAAOW,iBClBbC,EAfG,SAAAnB,GAAsB,IAAnBoB,EAAmBpB,EAAnBoB,aACnB,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMgB,MAAO,CAAEC,UAAW,WACvCpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,mCACVkB,KAAK,SACLC,YAAY,yBACZC,SAAUL,OCoCLM,cAxCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,eAAiB,SAAAC,GACfR,EAAKS,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QACtCC,QAAQC,IAAId,EAAKe,MAAML,cARvBV,EAAKe,MAAQ,CACXL,YAAa,GACbM,KAAM,IAJShB,mFAaC,IAAAiB,EAAAd,KAClBe,MAAM,iDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAH,GAAI,OAAIC,EAAKR,SAAS,CAAEO,WAChCH,QAAQC,uCAGD,IAEcQ,EADbN,EAASb,KAAKY,MAAdC,KAOFO,GANeD,EAMkBnB,KAAKY,MAAML,YAAaM,EAL3CQ,OAAO,SAAAC,GACvB,IAAMC,EAAQ,IAAIC,OAAOL,EAAa,MACtC,OAAOG,EAAUtC,KAAKyC,MAAMF,MAKhC,OACEpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIiB,MAAO,CAAEC,UAAW,WAAxB,sBACApB,EAAAC,EAAAC,cAACqD,EAAD,CAAWrC,aAAcW,KAAKI,iBAC9BjC,EAAAC,EAAAC,cAACsD,EAAD,CAAYzD,WAAYkD,YAnCdQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASP,MACvB,2DCZNQ,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.4d3cb58a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MeteorList = ({ meteorites }) => {\r\n  return (\r\n    <div>\r\n      <table className=\"table table-hover table-active \">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Id</th>\r\n            <th>Mass(g)</th>\r\n            <th>Year</th>\r\n            <th>Latitude</th>\r\n            <th>Longitude</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {meteorites.map((meteor, i) => {\r\n            const classes = [];\r\n            if (i % 2 === 0) {\r\n              classes.push(\"table-primary\");\r\n            } else {\r\n              classes.push(\"table-secondary\");\r\n            }\r\n            let year;\r\n            if (meteor.year) {\r\n              year = meteor.year.slice(0, 4);\r\n            }\r\n            return (\r\n              <tr className={classes} key={meteor.id}>\r\n                <td>{meteor.name}</td>\r\n                <td>{meteor.id}</td>\r\n                <td>{meteor.mass}</td>\r\n                <td>{year}</td>\r\n                <td>{meteor.reclat}</td>\r\n                <td>{meteor.reclong}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeteorList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"row\" style={{ textAlign: \"center\" }}>\r\n      <div className=\"col-lg-4 col-lg-offset-4 col-centered\">\r\n        <input\r\n          className=\"col-form-label col-form-label-lg\"\r\n          type=\"search\"\r\n          placeholder=\"Search for a Meteorite\"\r\n          onChange={searchChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MeteorList from \"./components/MeteorList\";\nimport SearchBox from \"./components/SearchBox\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchValue: \"\",\n      data: []\n    };\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchValue: e.target.value });\n    console.log(this.state.searchValue);\n  };\n\n  componentDidMount() {\n    fetch(\"https://data.nasa.gov/resource/gh4g-9sfh.json\")\n      .then(response => response.json())\n      .then(data => this.setState({ data }));\n    console.log();\n  }\n\n  render() {\n    const { data } = this.state;\n    const findMatches = (wordToMatch, meteorites) => {\n      return meteorites.filter(meteorite => {\n        const regex = new RegExp(wordToMatch, \"gi\");\n        return meteorite.name.match(regex);\n      });\n    };\n    const filteredMeteorites = findMatches(this.state.searchValue, data);\n\n    return (\n      <div>\n        <h1 style={{ textAlign: \"center\" }}>Meteorite Explorer</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <MeteorList meteorites={filteredMeteorites} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}